AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
model.subset4 = ((AvgTravelledDistance ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+AvgGoalConcededLastMatches))
model.subset41 = ((AvgTravelledDistance ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+AvgGoalConcededLastMatches+SupportersImpact))
linear.model5 = ((PressingCapability ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
model.subset5 = ((PressingCapability ~ Humidity+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance))
model.subset51 = ((PressingCapability ~ Humidity+RestTimeFromLastMatch+
AvgPlayerValue+SupportersImpact+MatchRelevance))
linear.model6 = ((PhysicalEndurance ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
model.subset6 = ((PhysicalEndurance ~ Humidity+RestTimeFromLastMatch+
AvgPlayerValue+AvgGoalConcededLastMatches))
linear.model7 = ((MentalConcentration ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
model.subset7 = ((MentalConcentration ~ RestTimeFromLastMatch+
AvgPlayerValue+AvgGoalConcededLastMatches+SupportersImpact))
model.subset71 = ((MentalConcentration ~ ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
linear.model8 = ((EmotionalMotivation ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
model.subset8 = ((EmotionalMotivation ~ AvgPlayerValue+SupportersImpact))
model.subset81 = ((EmotionalMotivation ~ AvgPlayerValue+MatchRelevance+SupportersImpact))
model.subset82 = ((EmotionalMotivation ~ AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
models = c(linear.model1, linear.model2, linear.model3, linear.model4, linear.model5, linear.model6, linear.model7, linear.model8,
model.subset1, model.subset12, model.subset13, model.subset2, model.subset21, model.subset22, model.subset3, model.subset31,
model.subset4, model.subset41, model.subset5, model.subset51, model.subset6, model.subset7, model.subset71, model.subset8,
model.subset81, model.subset82)
### ------ LEAVE ONE OUT CROSS VALIDATION -----#
library(ISLR)
library(boot)
print(length(models))
set.seed(1389)
k=10 #the dataset will be splitted in 10 parts
cv.error.10=rep(0,26)
glm.fit_kfold[1] = 0
glm.fit_kfold = 0
glm.fit_kfold[1] = 0
print(glm.fit_kfold)
for (i in 1:26){
glm.fit_kfold[i]=glm(models[[i]],data=myds)
cv.error.10[i]=cv.glm(myds ,glm.fit_kfold[i],K=k)$delta [1]
}
glm.fit_kfold[2] = 0
print(glm.fit_kfold)
for (i in 1:26){
glm.fit_kfold[i]=glm(models[[i]],data=myds)
cv.error.10[i]=cv.glm(myds ,glm.fit_kfold[i],K=k)$delta [1]
}
prova = c(26)
print(prova)
o
prova = c(26, 1, 3)
print(prova)
prova = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
print(prova)
print(prova[1])
glm.fit_kfold = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
for (i in 1:26){
glm.fit_kfold[i]=glm(models[[i]],data=myds)
cv.error.10[i]=cv.glm(myds ,glm.fit_kfold[i],K=k)$delta [1]
}
### ----- K FOLD CROSS VALIDATION -----###
library(ISLR)
library(boot)
set.seed(1389)
k=10 #the dataset will be splitted in 10 parts
cv.error.10=rep(0,26)
for (i in 1:26){
glm.fit_kfold=glm(models[[i]],data=myds)
print(glm.fit_kfold)
cv.error.10[i]=cv.glm(myds ,glm.fit_kfold[i],K=k)$delta [1]
}
print(cv.error.10)
library(ISLR)
library(boot)
set.seed(1389)
k=10 #the dataset will be splitted in 10 parts
cv.error.10=rep(0,26)
for (i in 1:26){
glm.fit=glm(models[[i]],data=myds)
cv.error.10[i]=cv.glm(myds ,glm.fit,K=k)$delta [1]
}
print(cv.error.10)
for (i in 1:26){
glm.fit=glm(models[[i]],data=myds)
print(glm.fit)
cv.error.10[i]=cv.glm(myds ,glm.fit,K=k)$delta [1]
}
for (i in 1:26){
predict(models[i], X_test)
}
for (i in 1:26){
glm.fit=glm(models[[i]],data=myds)
predict(glm.fit, X_test)
cv.error[i]=cv.glm(myds,glm.fit)$delta[1]
}
print(cv.error)
setwd('C:/Users/vdevi/MyDesktop/unisa/magistrale/Primo anno/secondo semestre/statistical e data analysis/progetto/StatisticalDataAnalysis')
myds = read.csv('C:/Users/vdevi/MyDesktop/unisa/magistrale/Primo anno/secondo semestre/statistical e data analysis/progetto/StatisticalDataAnalysis/Datasets/RegressionData_SDA_AH_group3.csv')
# Scale the dataset by subtracting the column means and dividing by the column
# standard deviation
myds = scale(myds)
myds = as.data.frame(myds)
library("caret")
preproc <- preProcess(myds, method=c("range"))
myds <- predict(preproc,myds)
summary(myds)
# Separate the dataset in X (containing predictors) and Y (containing response)
X = myds[, 1:10]
Y = myds[, 11:18]
library(dplyr)
myds <- rename(myds, Temperature=X_Temperature, Humidity=X_Humidity, Altitude=X_Altitude,
ClimaticConditions=X_ClimaticConditions, RestTimeFromLastMatch=X_RestTimeFromLastMatch,
AvgPlayerValue=X_AvgPlayerValue, MatchRelevance=X_MatchRelevance,
AvgGoalConcededLastMatches=X_AvgGoalConcededLastMatches, SupportersImpact=X_SupportersImpact,
OpposingSupportersImpact=X_OpposingSupportersImpact, Dehydration=Y_Dehydration, Hyperthermia=Y_Hyperthermia,
AvgSpeed=Y_AvgSpeed, AvgTravelledDistance=Y_AvgTravelledDistance,
PressingCapability=Y_PressingCapability, PhysicalEndurance=Y_PhysicalEndurance,
MentalConcentration=Y_MentalConcentration, EmotionalMotivation=Y_EmotionalMotivation)
X <- rename(X, Temperature=X_Temperature, Humidity=X_Humidity, Altitude=X_Altitude,
ClimaticConditions=X_ClimaticConditions, RestTimeFromLastMatch=X_RestTimeFromLastMatch,
AvgPlayerValue=X_AvgPlayerValue, MatchRelevance=X_MatchRelevance,
AvgGoalConcededLastMatches=X_AvgGoalConcededLastMatches, SupportersImpact=X_SupportersImpact,
OpposingSupportersImpact=X_OpposingSupportersImpact)
Y <- rename(Y, Dehydration=Y_Dehydration, Hyperthermia=Y_Hyperthermia,
AvgSpeed=Y_AvgSpeed, AvgTravelledDistance=Y_AvgTravelledDistance,
PressingCapability=Y_PressingCapability, PhysicalEndurance=Y_PhysicalEndurance,
MentalConcentration=Y_MentalConcentration, EmotionalMotivation=Y_EmotionalMotivation)
# Split the two datasets in train and test
splitpoint = 30
X_train = X[1:splitpoint,]
X_test = X[(splitpoint+1):40,]
Y_train = Y[1:splitpoint,]
Y_test = Y[(splitpoint+1):40,]
linear.model1 = ((Dehydration ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
model.subset1 = ((Dehydration ~ Temperature+Humidity))
model.subset12 = ((Dehydration ~ Temperature+Humidity+AvgPlayerValue))
model.subset13 = ((Dehydration ~ Temperature+Humidity+AvgPlayerValue+Altitude))
linear.model2 = ((Hyperthermia ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
model.subset2 = ((Hyperthermia ~ Temperature+Humidity))
model.subset21 = ((Hyperthermia ~ Temperature+Humidity+RestTimeFromLastMatch+MatchRelevance))
model.subset22 = ((Hyperthermia ~ Temperature+Humidity+Altitude+RestTimeFromLastMatch+MatchRelevance))
linear.model3 = ((AvgSpeed ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
model.subset3 = ((AvgSpeed ~ Temperature+Humidity+Altitude+RestTimeFromLastMatch+
AvgPlayerValue))
model.subset31 = ((AvgSpeed ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance))
linear.model4 = ((AvgTravelledDistance ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
model.subset4 = ((AvgTravelledDistance ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+AvgGoalConcededLastMatches))
model.subset41 = ((AvgTravelledDistance ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+AvgGoalConcededLastMatches+SupportersImpact))
linear.model5 = ((PressingCapability ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
model.subset5 = ((PressingCapability ~ Humidity+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance))
model.subset51 = ((PressingCapability ~ Humidity+RestTimeFromLastMatch+
AvgPlayerValue+SupportersImpact+MatchRelevance))
linear.model6 = ((PhysicalEndurance ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
model.subset6 = ((PhysicalEndurance ~ Humidity+RestTimeFromLastMatch+
AvgPlayerValue+AvgGoalConcededLastMatches))
linear.model7 = ((MentalConcentration ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
model.subset7 = ((MentalConcentration ~ RestTimeFromLastMatch+
AvgPlayerValue+AvgGoalConcededLastMatches+SupportersImpact))
model.subset71 = ((MentalConcentration ~ ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
linear.model8 = ((EmotionalMotivation ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
model.subset8 = ((EmotionalMotivation ~ AvgPlayerValue+SupportersImpact))
model.subset81 = ((EmotionalMotivation ~ AvgPlayerValue+MatchRelevance+SupportersImpact))
model.subset82 = ((EmotionalMotivation ~ AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
models = c(linear.model1, linear.model2, linear.model3, linear.model4, linear.model5, linear.model6, linear.model7, linear.model8,
model.subset1, model.subset12, model.subset13, model.subset2, model.subset21, model.subset22, model.subset3, model.subset31,
model.subset4, model.subset41, model.subset5, model.subset51, model.subset6, model.subset7, model.subset71, model.subset8,
model.subset81, model.subset82)
library(ISLR)
library(boot)
print(length(models))
cv.error=rep(0,7)
for (i in 1:26){
glm.fit=glm(models[[i]],data=myds)
predict(glm.fit, X_test)
cv.error[i]=cv.glm(myds,glm.fit)$delta[1]
}
print(cv.error)
for (i in 1:26){
glm.fit=glm(models[[i]],data=myds)
predict(glm.fit, X_test)
cv.error[i]=cv.glm(myds,glm.fit)$delta[1]
}
for (i in 1:26){
glm.fit=glm(models[[i]],data=myds)
y = predict(glm.fit, X_test)
print(y)
cv.error[i]=cv.glm(myds,glm.fit)$delta[1]
}
for (i in 1:26){
glm.fit=glm(models[[i]],data=myds)
print(glm.fit)
#y = predict(glm.fit, X_test)
#print(y)
cv.error[i]=cv.glm(myds,glm.fit)$delta[1]
}
for (i in 1:26){
glm.fit=glm(models[[i]],data=myds)
#print(glm.fit)
#y = predict(glm.fit, X_test)
#print(y)
print(type(glm.fit))
cv.error[i]=cv.glm(myds,glm.fit)$delta[1]
}
for (i in 1:26){
glm.fit=glm(models[[i]],data=myds)
#print(glm.fit)
#y = predict(glm.fit, X_test)
#print(y)
print(typeof(glm.fit))
cv.error[i]=cv.glm(myds,glm.fit)$delta[1]
}
fit_1 = lm(Y_train$Dehydration ~ ., data=X_train)
print(fit_1)
print(typeof(fit_1))
print(glm.fit)
print(predict(glm.fit, X_test))
print(X_test)
print(Y_test)
print(predict(glm.fit, X_test))
print(X_test)
print(Y_test)
setwd('C:/Users/vdevi/MyDesktop/unisa/magistrale/Primo anno/secondo semestre/statistical e data analysis/progetto/StatisticalDataAnalysis')
myds = read.csv('C:/Users/vdevi/MyDesktop/unisa/magistrale/Primo anno/secondo semestre/statistical e data analysis/progetto/StatisticalDataAnalysis/Datasets/RegressionData_SDA_AH_group3.csv')
# Scale the dataset by subtracting the column means and dividing by the column
# standard deviation
myds = scale(myds)
myds = as.data.frame(myds)
library("caret")
preproc <- preProcess(myds, method=c("range"))
myds <- predict(preproc,myds)
summary(myds)
# Separate the dataset in X (containing predictors) and Y (containing response)
X = myds[, 1:10]
Y = myds[, 11:18]
library(dplyr)
myds <- rename(myds, Temperature=X_Temperature, Humidity=X_Humidity, Altitude=X_Altitude,
ClimaticConditions=X_ClimaticConditions, RestTimeFromLastMatch=X_RestTimeFromLastMatch,
AvgPlayerValue=X_AvgPlayerValue, MatchRelevance=X_MatchRelevance,
AvgGoalConcededLastMatches=X_AvgGoalConcededLastMatches, SupportersImpact=X_SupportersImpact,
OpposingSupportersImpact=X_OpposingSupportersImpact, Dehydration=Y_Dehydration, Hyperthermia=Y_Hyperthermia,
AvgSpeed=Y_AvgSpeed, AvgTravelledDistance=Y_AvgTravelledDistance,
PressingCapability=Y_PressingCapability, PhysicalEndurance=Y_PhysicalEndurance,
MentalConcentration=Y_MentalConcentration, EmotionalMotivation=Y_EmotionalMotivation)
X <- rename(X, Temperature=X_Temperature, Humidity=X_Humidity, Altitude=X_Altitude,
ClimaticConditions=X_ClimaticConditions, RestTimeFromLastMatch=X_RestTimeFromLastMatch,
AvgPlayerValue=X_AvgPlayerValue, MatchRelevance=X_MatchRelevance,
AvgGoalConcededLastMatches=X_AvgGoalConcededLastMatches, SupportersImpact=X_SupportersImpact,
OpposingSupportersImpact=X_OpposingSupportersImpact)
Y <- rename(Y, Dehydration=Y_Dehydration, Hyperthermia=Y_Hyperthermia,
AvgSpeed=Y_AvgSpeed, AvgTravelledDistance=Y_AvgTravelledDistance,
PressingCapability=Y_PressingCapability, PhysicalEndurance=Y_PhysicalEndurance,
MentalConcentration=Y_MentalConcentration, EmotionalMotivation=Y_EmotionalMotivation)
# Split the two datasets in train and test
splitpoint = 30
X_train = X[1:splitpoint,]
X_test = X[(splitpoint+1):40,]
Y_train = Y[1:splitpoint,]
Y_test = Y[(splitpoint+1):40,]
linear.model1 = ((Dehydration ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
model.subset1 = ((Dehydration ~ Temperature+Humidity))
model.subset12 = ((Dehydration ~ Temperature+Humidity+AvgPlayerValue))
model.subset13 = ((Dehydration ~ Temperature+Humidity+AvgPlayerValue+Altitude))
linear.model2 = ((Hyperthermia ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
model.subset2 = ((Hyperthermia ~ Temperature+Humidity))
model.subset21 = ((Hyperthermia ~ Temperature+Humidity+RestTimeFromLastMatch+MatchRelevance))
model.subset22 = ((Hyperthermia ~ Temperature+Humidity+Altitude+RestTimeFromLastMatch+MatchRelevance))
linear.model3 = ((AvgSpeed ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
model.subset3 = ((AvgSpeed ~ Temperature+Humidity+Altitude+RestTimeFromLastMatch+
AvgPlayerValue))
model.subset31 = ((AvgSpeed ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance))
linear.model4 = ((AvgTravelledDistance ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
model.subset4 = ((AvgTravelledDistance ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+AvgGoalConcededLastMatches))
model.subset41 = ((AvgTravelledDistance ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+AvgGoalConcededLastMatches+SupportersImpact))
linear.model5 = ((PressingCapability ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
model.subset5 = ((PressingCapability ~ Humidity+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance))
model.subset51 = ((PressingCapability ~ Humidity+RestTimeFromLastMatch+
AvgPlayerValue+SupportersImpact+MatchRelevance))
linear.model6 = ((PhysicalEndurance ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
model.subset6 = ((PhysicalEndurance ~ Humidity+RestTimeFromLastMatch+
AvgPlayerValue+AvgGoalConcededLastMatches))
linear.model7 = ((MentalConcentration ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
model.subset7 = ((MentalConcentration ~ RestTimeFromLastMatch+
AvgPlayerValue+AvgGoalConcededLastMatches+SupportersImpact))
model.subset71 = ((MentalConcentration ~ ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
linear.model8 = ((EmotionalMotivation ~ Temperature+Humidity+Altitude+ClimaticConditions+RestTimeFromLastMatch+
AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
model.subset8 = ((EmotionalMotivation ~ AvgPlayerValue+SupportersImpact))
model.subset81 = ((EmotionalMotivation ~ AvgPlayerValue+MatchRelevance+SupportersImpact))
model.subset82 = ((EmotionalMotivation ~ AvgPlayerValue+MatchRelevance+AvgGoalConcededLastMatches+SupportersImpact+
OpposingSupportersImpact))
models = c(linear.model1, linear.model2, linear.model3, linear.model4, linear.model5, linear.model6, linear.model7, linear.model8,
model.subset1, model.subset12, model.subset13, model.subset2, model.subset21, model.subset22, model.subset3, model.subset31,
model.subset4, model.subset41, model.subset5, model.subset51, model.subset6, model.subset7, model.subset71, model.subset8,
model.subset81, model.subset82)
library(leaps)
subsel_fwd_1 = regsubsets(Y_train$Dehydration ~ .,data=X_train, nvmax=10, method='forward')
subsel_bwd_1 = regsubsets(Y_train$Dehydration ~ .,data=X_train, nvmax=10, method='backward')
summary_fwd = summary(subsel_fwd)
library(leaps)
subsel_fwd_1 = regsubsets(Y_train$Dehydration ~ .,data=X_train, nvmax=10, method='forward')
subsel_bwd_1 = regsubsets(Y_train$Dehydration ~ .,data=X_train, nvmax=10, method='backward')
summary_fwd = summary(subsel_fwd_1)
summary_bwd = summary(subsel_bwd_1)
plot(summary_fwd$rss, xlab='Models', ylab='RSS', col='red', main='Best Subset Selection Dehydration')
points(summary_bwd$rss, col='blue')
plot(summary_fwd$adjr2, xlab='Model', ylab='AdjR2', col='red', main='Best Subset Selection Dehydration')
points(summary_bwd$adjr2, col='blue')
plot(summary_fwd$cp, xlab='Model', ylab='Cp', col='red', main='Best Subset Selection Dehydration')
points(summary_bwd$cp, col='blue')
plot(summary_fwd$bic, xlab='Model', ylab='BIC', col='red', main='Best Subset Selection Dehydration')
points(summary_bwd$bic, col='blue')
subsel_fwd_2 = regsubsets(Y_train$Hyperthermia ~ ., data=X_train, nvmax=10, method='forward')
subsel_bwd_2 = regsubsets(Y_train$Hyperthermia ~ ., data=X_train, nvmax=10, method='backward')
summary_fwd = summary(subsel_fwd_2)
summary_bwd = summary(subsel_bwd_2)
plot(summary_fwd$rss, xlab='Model', ylab='RSS', col='red', main='Best Subset Selection Hyphertermia')
points(summary_bwd$rss, col='blue')
plot(summary_fwd$adjr2, xlab='Model', ylab='AdjR2', col='red', main='Best Subset Selection Hyphertermia')
points(summary_bwd$adjr2, col='blue')
plot(summary_fwd$cp, xlab='Model', ylab='Cp', col='red', main='Best Subset Selection Hyphertermia')
points(summary_bwd$cp, col='blue')
plot(summary_fwd$bic, xlab='Model', ylab='BIC', col='red', main='Best Subset Selection Hyphertermia')
points(summary_bwd$bic, col='blue')
subsel_fwd_3 = regsubsets(Y_train$AvgSpeed ~ ., data=X_train, nvmax=10, method='forward')
subsel_bwd_3 = regsubsets(Y_train$AvgSpeed ~ ., data=X_train, nvmax=10, method='backward')
summary_fwd = summary(subsel_fwd_3)
summary_bwd = summary(subsel_bwd_3)
plot(summary_fwd$rss, xlab='Model', ylab='RSS', col='red', main='Best Subset Selection AvgSpeed')
points(summary_bwd$rss, col='blue')
plot(summary_fwd$adjr2, xlab='Model', ylab='AdjR2', col='red', main='Best Subset Selection AvgSpeed')
points(summary_bwd$adjr2, col='blue')
plot(summary_fwd$cp, xlab='Model', ylab='Cp', col='red', main='Best Subset Selection AvgSpeed')
points(summary_bwd$cp, col='blue')
plot(summary_fwd$bic, xlab='Model', ylab='BIC', col='red', main='Best Subset Selection AvgSpeed')
points(summary_bwd$bic, col='blue')
subsel_fwd_4 = regsubsets(Y_train$AvgTravelledDistance ~ ., data=X_train, nvmax=10, method='forward')
subsel_bwd_4 = regsubsets(Y_train$AvgTravelledDistance ~ ., data=X_train, nvmax=10, method='backward')
summary_fwd = summary(subsel_fwd_4)
summary_bwd = summary(subsel_bwd_4)
plot(summary_fwd$rss, xlab='Model', ylab='RSS', col='red', main='Best Subset Selection AvgTravelledDistance')
points(summary_bwd$rss, col='blue')
plot(summary_fwd$adjr2, xlab='Model', ylab='AdjR2', col='red', main='Best Subset Selection AvgTravelledDistance')
points(summary_bwd$adjr2, col='blue')
plot(summary_fwd$cp, xlab='Model', ylab='Cp', col='red', main='Best Subset Selection AvgTravelledDistance')
points(summary_bwd$cp, col='blue')
plot(summary_fwd$bic, xlab='Model', ylab='BIC', col='red', main='Best Subset Selection AvgTravelledDistance')
points(summary_bwd$bic, col='blue')
subsel_fwd_5 = regsubsets(Y_train$PressingCapability ~ ., data=X_train, nvmax=10, method='forward')
subsel_bwd_5 = regsubsets(Y_train$PressingCapability ~ ., data=X_train, nvmax=10, method='backward')
summary_fwd = summary(subsel_fwd_5)
summary_bwd = summary(subsel_bwd_5)
plot(summary_fwd$rss, xlab='Model', ylab='RSS', col='red', main='Best Subset Selection PressingCapability')
points(summary_bwd$rss, col='blue')
plot(summary_fwd$adjr2, xlab='Model', ylab='AdjR2', col='red', main='Best Subset Selection PressingCapability')
points(summary_bwd$adjr2, col='blue')
plot(summary_fwd$cp, xlab='Model', ylab='Cp', col='red', main='Best Subset Selection PressingCapability')
points(summary_bwd$cp, col='blue')
plot(summary_fwd$bic, xlab='Model', ylab='BIC', col='red', main='Best Subset Selection PressingCapability')
points(summary_bwd$bic, col='blue')
subsel_fwd_6 = regsubsets(Y_train$PhysicalEndurance ~ ., data=X_train, nvmax=10, method='forward')
subsel_bwd_6 = regsubsets(Y_train$PhysicalEndurance ~ ., data=X_train, nvmax=10, method='backward')
summary_fwd = summary(subsel_fwd_6)
summary_bwd = summary(subsel_bwd_6)
plot(summary_fwd$rss, xlab='Model', ylab='RSS', col='red', main='Best Subset Selection PhysicalEndurance')
points(summary_bwd$rss, col='blue')
plot(summary_fwd$adjr2, xlab='Model', ylab='AdjR2', col='red', main='Best Subset Selection PhysicalEndurance')
points(summary_bwd$adjr2, col='blue')
plot(summary_fwd$cp, xlab='Model', ylab='Cp', col='red', main='Best Subset Selection PhysicalEndurance')
points(summary_bwd$cp, col='blue')
plot(summary_fwd$bic, xlab='Model', ylab='BIC', col='red', main='Best Subset Selection PhysicalEndurance')
points(summary_bwd$bic, col='blue')
subsel_fwd_7 = regsubsets(Y_train$MentalConcentration ~ ., data=X_train, nvmax=10, method='forward')
subsel_bwd_7 = regsubsets(Y_train$MentalConcentration ~ ., data=X_train, nvmax=10, method='backward')
summary_fwd = summary(subsel_fwd_7)
summary_bwd = summary(subsel_bwd_7)
plot(summary_fwd$rss, xlab='Model', ylab='RSS', col='red', main='Best Subset Selection MentalConcentration')
points(summary_bwd$rss, col='blue')
plot(summary_fwd$adjr2, xlab='Model', ylab='AdjR2', col='red', main='Best Subset Selection MentalConcentration')
points(summary_bwd$adjr2, col='blue')
plot(summary_fwd$cp, xlab='Model', ylab='Cp', col='red', main='Best Subset Selection MentalConcentration')
points(summary_bwd$cp, col='blue')
plot(summary_fwd$bic, xlab='Model', ylab='BIC', col='red', main='Best Subset Selection MentalConcentration')
points(summary_bwd$bic, col='blue')
subsel_fwd_8 = regsubsets(Y_train$EmotionalMotivation ~ ., data=X_train, nvmax=10, method='forward')
subsel_bwd_8 = regsubsets(Y_train$EmotionalMotivation ~ ., data=X_train, nvmax=10, method='backward')
summary_fwd = summary(subsel_fwd_8)
summary_bwd = summary(subsel_bwd_8)
plot(summary_fwd$rss, xlab='Model', ylab='RSS', col='red', main='Best Subset Selection EmotionalMotivation')
points(summary_bwd$rss, col='blue')
plot(summary_fwd$adjr2, xlab='Model', ylab='AdjR2', col='red', main='Best Subset Selection EmotionalMotivation')
points(summary_bwd$adjr2, col='blue')
plot(summary_fwd$cp, xlab='Model', ylab='Cp', col='red', main='Best Subset Selection EmotionalMotivation')
points(summary_bwd$cp, col='blue')
plot(summary_fwd$bic, xlab='Model', ylab='BIC', col='red', main='Best Subset Selection EmotionalMotivation')
points(summary_bwd$bic, col='blue')
## Y=Dehydration, X={all the predictors}
fit_1 = lm(Y_train$Dehydration ~ ., data=X_train)
## Y=Hyperthermia, X={all the predictors}
fit_2 = lm(Y_train$Hyperthermia ~ ., data=X_train)
## Y=AvgSpeed, X={all the predictors}
fit_3 = lm(Y_train$AvgSpeed ~ ., data=X_train)
## Y=AvgTravelledDistance, X={all the predictors}
fit_4 = lm(Y_train$AvgTravelledDistance ~ ., data=X_train)
## Y=PressingCapability, X={all the predictors}
fit_5 = lm(Y_train$PressingCapability ~ ., data=X_train)
## Y=PhysicalEndurance, X={all the predictors}
fit_6 = lm(Y_train$PhysicalEndurance ~ ., data=X_train)
## Y=MentalConcentration, X={all the predictors}
fit_7 = lm(Y_train$MentalConcentration ~ ., data=X_train)
## Y=EmotionalMotivation, X={all the predictors}
fit_8 = lm(Y_train$EmotionalMotivation ~ ., data=X_train)
# Simple function to calculate the MSE
mse_func = function(actual, predicted) {
mean( (actual - predicted)^2 )
}
mse_1_train = mse_func(Y_train$Dehydration, predict(fit_1, X_train))
mse_2_train = mse_func(Y_train$Hyperthermia, predict(fit_2, X_train))
mse_3_train = mse_func(Y_train$AvgSpeed, predict(fit_3, X_train))
mse_4_train = mse_func(Y_train$AvgTravelledDistance, predict(fit_4, X_train))
mse_5_train = mse_func(Y_train$PressingCapability, predict(fit_5, X_train))
mse_6_train = mse_func(Y_train$PhysicalEndurance, predict(fit_6, X_train))
mse_7_train = mse_func(Y_train$MentalConcentration, predict(fit_7, X_train))
mse_8_train = mse_func(Y_train$EmotionalMotivation, predict(fit_8, X_train))
mse_tot_train = c(mse_1_train, mse_2_train, mse_3_train, mse_4_train, mse_5_train, mse_6_train, mse_7_train, mse_8_train)
mse_1_test = mse_func(Y_test$Dehydration, predict(fit_1, X_test))
mse_2_test = mse_func(Y_test$Hyperthermia, predict(fit_2, X_test))
mse_3_test = mse_func(Y_test$AvgSpeed, predict(fit_3, X_test))
mse_4_test = mse_func(Y_test$AvgTravelledDistance, predict(fit_4, X_test))
mse_5_test = mse_func(Y_test$PressingCapability, predict(fit_5, X_test))
mse_6_test = mse_func(Y_test$PhysicalEndurance, predict(fit_6, X_test))
mse_7_test = mse_func(Y_test$MentalConcentration, predict(fit_7, X_test))
mse_8_test = mse_func(Y_test$EmotionalMotivation, predict(fit_8, X_test))
mse_tot_test = c(mse_1_test, mse_2_test, mse_3_test, mse_4_test, mse_5_test, mse_6_test, mse_7_test, mse_8_test)
y_pred_1 = predict(fit_1, X_test)
y_pred_2 = predict(fit_2, X_test)
y_pred_3 = predict(fit_3, X_test)
y_pred_4 = predict(fit_4, X_test)
y_pred_5 = predict(fit_5, X_test)
y_pred_6 = predict(fit_6, X_test)
y_pred_7 = predict(fit_7, X_test)
y_pred_8 = predict(fit_8, X_test)
y_pred_subfwd_1 = predict(subsel_fwd_1, X_test)
y_pred_subbwd_1 = predict(subsel_bwd_1, X_test)
??predict.regsubset
??predict.regsubsets
??regsubsets
models_sub = c(model.subset1,model.subset12, model.subset13, model.subset2, model.subset21, model.subset22,
model.subset3, model.subset31, model.subset4, model.subset41, model.subset5, model.subset51,
model.subset6, model.subset7, model.subset71, model.subset8, model.subset81, model.subset82)
print(len(models_sub))
print(len(models_sub))
??len
len(models_sub)
len(models)
length(models_sub)
print(fit_1)
fit_9 = lm(model.subset1, data=myds)
