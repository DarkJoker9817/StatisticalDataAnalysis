func = function(actual, predicted)
{
mean( (actual - predicted)^2 )
}
mse_test = mse_func(pcr_pred, y_test)
mse_func = function(actual, predicted)
{
mean( (actual - predicted)^2 )
}
mse_test = mse_func(pcr_pred, y_test)
y_test = as.numeric(unlist(test[19]))
mse_test = mse_func(pcr_pred, y_test)
mse_test
RMSEP(pcr_fit)
plot(RMSEP(pcr_fit))
pcr_git_full = pcr(Salary~., data=ds, scale=TRUE, ncomp=5)
summary(pcr_fit_full)
pcr_fit_full = pcr(Salary~., data=ds, scale=TRUE, ncomp=5)
summary(pcr_fit_full)
data=Boston
pcaBoston=prcomp(scale(data[,-14]))
#### PCR vs LM ####
library(MASS)
data=Boston
pcaBoston=prcomp(scale(data[,-14]))
### Fit (lm) using the first 3 PCs
lm_pca = lm(data$medv ~ score[,1:3])
score = pcaBoston$x #z_i
### Fit (lm) using the first 3 PCs
lm_pca = lm(data$medv ~ score[,1:3])
summary(lm_pca)
### Fit (lm) using the first 3 PCs
lm_pca = lm(data$medv ~ score[,1:3])
summary(lm_pca)
lm_full = lm(data$medv ~., data=data)
summary(lm_full)
plot(data$medv, predict(lm_pca))
par(mfrow=c(1,2))
plot(data$medv, predict(lm_pca), xlab='Actual MEDV', ylab='Predicted MEDV', main='PCR')
plot(data$medv, predict(flm_full), xlab='Actual MEDV', ylab='Predicted MEDV', main='Linear Model')
plot(data$medv, predict(lm_full), xlab='Actual MEDV', ylab='Predicted MEDV', main='Linear Model')
plot(data$medv, predict(lm_pca), xlab='Actual MEDV', ylab='Predicted MEDV', main='PCR', ylim=c(0,50))
plot(data$medv, predict(lm_full), xlab='Actual MEDV', ylab='Predicted MEDV', main='Linear Model', ylim=c(0,50))
mse_pcr = mse_func(data$medv, predict(lm_pca))
mse_lm = mse_func(data$medv, predict(lm_full))
mse_pcr
mse_lm
ds = na.omit(Hitters)
train = ds[1:180,]
test = ds[181:263,]
x_train = model.matrix(Salary~., train)[,-1]
x_test = model.matrix(Salary~., test)[,-1]
y_train = train[19]
y_test = as.numeric(unlist(test[19]))
head(10, ds)
head(ds, 10)
pls_fit = plsr(Salary~., data=train, scale = TRUE, validation='CV')
pls_pred = predict(pls_fit, test, ncomp=5)
mse_func = function(actual, predicted)
{
mean( (actual - predicted)^2 )
}
mse_test = mse_func(pls_pred, y_test)
plot(RMSEP(pls_fit))
pls_fit_full = pls(Salary~., data=ds, scale=TRUE, ncomp=5)
pls_fit_full = plsr(Salary~., data=ds, scale=TRUE, ncomp=5)
mse_test
pls_fit_full = plsr(Salary~., data=ds, scale=TRUE, ncomp=5)
plot(RMSEP(pls_fit))
plot(RMSEP(pls_fit))
setwd("~/Desktop/Università/Statistical Data Analysis/Project/")
getwd()
myds = read.csv("RegressionData_SDA_AH_group3.csv")
myds = read.csv("Datasets/RegressionData_SDA_AH_group3.csv")
library("caret")
preproc <- preProcess(myds, method=c("range"))
myds <- predict(preproc,myds)
View(myds)
# Separate the dataset in X (containing predictors) and Y (containing response)
X = myds[, 1:10]
Y = myds[, 11:18]
library(dplyr)
myds <- rename(myds, Temperature=X_Temperature, Humidity=X_Humidity, Altitude=X_Altitude,
ClimaticConditions=X_ClimaticConditions, RestTimeFromLastMatch=X_RestTimeFromLastMatch,
AvgPlayerValue=X_AvgPlayerValue, MatchRelevance=X_MatchRelevance,
AvgGoalConcededLastMatches=X_AvgGoalConcededLastMatches, SupportersImpact=X_SupportersImpact,
OpposingSupportersImpact=X_OpposingSupportersImpact, Dehydration=Y_Dehydration, Hyperthermia=Y_Hyperthermia,
AvgSpeed=Y_AvgSpeed, AvgTravelledDistance=Y_AvgTravelledDistance,
PressingCapability=Y_PressingCapability, PhysicalEndurance=Y_PhysicalEndurance,
MentalConcentration=Y_MentalConcentration, EmotionalMotivation=Y_EmotionalMotivation)
View(X)
X <- rename(X, Temperature=X_Temperature, Humidity=X_Humidity, Altitude=X_Altitude,
ClimaticConditions=X_ClimaticConditions, RestTimeFromLastMatch=X_RestTimeFromLastMatch,
AvgPlayerValue=X_AvgPlayerValue, MatchRelevance=X_MatchRelevance,
AvgGoalConcededLastMatches=X_AvgGoalConcededLastMatches, SupportersImpact=X_SupportersImpact,
OpposingSupportersImpact=X_OpposingSupportersImpact)
Y <- rename(Y, Dehydration=Y_Dehydration, Hyperthermia=Y_Hyperthermia,
AvgSpeed=Y_AvgSpeed, AvgTravelledDistance=Y_AvgTravelledDistance,
PressingCapability=Y_PressingCapability, PhysicalEndurance=Y_PhysicalEndurance,
MentalConcentration=Y_MentalConcentration, EmotionalMotivation=Y_EmotionalMotivation)
# Split the two datasets in train and test
splitpoint = 30
X_train = X[1:splitpoint,]
X_test = X[(splitpoint+1):40,]
Y_train = Y[1:splitpoint,]
Y_test = Y[(splitpoint+1):40,]
View(Y_test)
### For Loop -> best K value (min MSE)
u = c()
# MSE function
mse_function = function(actual, predicted) {
mean((actual-predicted)^2)
}
# KNN Model
knn_model = knnreg(X_train, Y_test, k=10) #KNN Model Fitting
pred_Y_knn = predict(knn_model, X_test) # KNN Model Prediction
# KNN Model
knn_model = knnreg(X_train, Y_test$Dehydration, k=10) #KNN Model Fitting
pred_Y_knn = predict(knn_model, X_test) # KNN Model Prediction
pred_Y_knn = predict(knn_model, X_test) # KNN Model Prediction
View(knn_model)
View(X_train)
View(Y_train)
View(X_train)
# KNN Model
knn_model = knnreg(X_train, Y_test$Dehydration, k=10) #KNN Model Fitting
pred_Y_knn = predict(knn_model, X_test) # KNN Model Prediction
View(knn_model)
# KNN Model
knn_model = knnreg(X_train, Y_train$Dehydration, k=10) #KNN Model Fitting
pred_Y_knn = predict(knn_model, X_test) # KNN Model Prediction
mse_knn = mse_func(Y_test$Dehydration, pred_Y_knn)
mse_knn = mse_function(Y_test$Dehydration, pred_Y_knn)
mse_knn
### For Loop -> best K value (min MSE)
u = c()
temp = c()
for(i in 1:20){
temp = knnreg(X_train, Y_train$AvgTravelledDistance, k=i) # KNN model fitting (iteration)
u[i] = c(mse_func(Y_test$Dehydration, predict(temp, X_test)))
}
for(i in 1:20){
temp = knnreg(X_train, Y_train$AvgTravelledDistance, k=i) # KNN model fitting (iteration)
u[i] = c(mse_function(Y_test$Dehydration, predict(temp, X_test)))
}
best_k = which.min(u)
best_k
u
# MSE function
mse_function = function(actual, predicted) {
mean((actual-predicted)^2)
}
# KNN Model
knn_model = knnreg(X_train, Y_train$Dehydration, k=10) #KNN Model Fitting
pred_Y_knn = predict(knn_model, X_test) # KNN Model Prediction
mse_knn = mse_function(Y_test$Dehydration, pred_Y_knn)
mse:knn
mse_knn
### For Loop -> best K value (min MSE)
u = c()
temp = c()
for(i in 1:20){
temp = knnreg(X_train, Y_train$Dehydration, k=i) # KNN model fitting (iteration)
u[i] = c(mse_function(Y_test$Dehydration, predict(temp, X_test)))
}
best_k = which.min(u)
best_k
uù
u
x = 1:length(Y_test)
plot(x, Y_test, col='red', type='l') # Original
plot(x, Y_test$Dehydration, col='red', type='l') # Original
x = 1:length(Y_test$Dehydration)
plot(x, Y_test$Dehydration, col='red', type='l') # Original
lines(x, pred_Y_knn, col='blue') # KNN
legend('topright', legend=c('Original', 'KNN'), col=c('red', 'blue'), pch=20)
###------------------------- Y = Hyperthermia -------------------------###
# KNN Model
knn_model = knnreg(X_train, Y_train$Hyperthermia, k=10) #KNN Model Fitting
pred_Y_knn = predict(knn_model, X_test) # KNN Model Prediction
mse_knn = mse_function(Y_test$Hyperthermia, pred_Y_knn)
### For Loop -> best K value (min MSE)
u = c()
temp = c()
for(i in 1:20){
temp = knnreg(X_train, Y_train$Hyperthermia, k=i) # KNN model fitting (iteration)
u[i] = c(mse_function(Y_test$Hyperthermia, predict(temp, X_test)))
}
best_k = which.min(u)
x = 1:length(Y_test$Hyperthermia)
plot(x, Y_test$Hyperthermia, col='red', type='l') # Original
lines(x, pred_Y_knn, col='blue') # KNN
legend('topright', legend=c('Original', 'KNN'), col=c('red', 'blue'), pch=20)
View(Y_test)
###------------------------- Y = AvgSpeed -------------------------###
# KNN Model
knn_model = knnreg(X_train, Y_train$AvgSpeed, k=10) #KNN Model Fitting
pred_Y_knn = predict(knn_model, X_test) # KNN Model Prediction
mse_knn = mse_function(Y_test$AvgSpeed, pred_Y_knn)
### For Loop -> best K value (min MSE)
u = c()
temp = c()
for(i in 1:20){
temp = knnreg(X_train, Y_train$AvgSpeed, k=i) # KNN model fitting (iteration)
u[i] = c(mse_function(Y_test$AvgSpeed, predict(temp, X_test)))
}
best_k = which.min(u)
x = 1:length(Y_test$AvgSpeed)
plot(x, Y_test$AvgSpeed, col='red', type='l') # Original
lines(x, pred_Y_knn, col='blue') # KNN
legend('topright', legend=c('Original', 'KNN'), col=c('red', 'blue'), pch=20)
###------------------------- Y = AvgTravelledDistance -------------------------###
# KNN Model
knn_model = knnreg(X_train, Y_train$AvgTravelledDistance, k=10) #KNN Model Fitting
pred_Y_knn = predict(knn_model, X_test) # KNN Model Prediction
mse_knn = mse_function(Y_test$AvgTravelledDistance, pred_Y_knn)
### For Loop -> best K value (min MSE)
u = c()
temp = c()
for(i in 1:20){
temp = knnreg(X_train, Y_train$AvgTravelledDistance, k=i) # KNN model fitting (iteration)
u[i] = c(mse_function(Y_test$AvgTravelledDistance, predict(temp, X_test)))
}
best_k = which.min(u)
x = 1:length(Y_test$AvgTravelledDistance)
plot(x, Y_test$AvgTravelledDistance, col='red', type='l') # Original
lines(x, pred_Y_knn, col='blue') # KNN
legend('topright', legend=c('Original', 'KNN'), col=c('red', 'blue'), pch=20)
###------------------------- Y = PressingCapability -------------------------###
# KNN Model
knn_model = knnreg(X_train, Y_train$PressingCapability, k=10) #KNN Model Fitting
pred_Y_knn = predict(knn_model, X_test) # KNN Model Prediction
mse_knn = mse_function(Y_test$PressingCapability, pred_Y_knn)
### For Loop -> best K value (min MSE)
u = c()
temp = c()
for(i in 1:20){
temp = knnreg(X_train, Y_train$PressingCapability, k=i) # KNN model fitting (iteration)
u[i] = c(mse_function(Y_test$PressingCapability, predict(temp, X_test)))
}
best_k = which.min(u)
x = 1:length(Y_test$PressingCapability)
plot(x, Y_test$PressingCapability, col='red', type='l') # Original
lines(x, pred_Y_knn, col='blue') # KNN
legend('topright', legend=c('Original', 'KNN'), col=c('red', 'blue'), pch=20)
###------------------------- Y = PhysicialEndurance -------------------------###
# KNN Model
knn_model = knnreg(X_train, Y_train$PhysicalEndurance, k=10) #KNN Model Fitting
pred_Y_knn = predict(knn_model, X_test) # KNN Model Prediction
mse_knn = mse_function(Y_test$PhysicalEndurance, pred_Y_knn)
### For Loop -> best K value (min MSE)
u = c()
temp = c()
for(i in 1:20){
temp = knnreg(X_train, Y_train$PhysicalEndurance, k=i) # KNN model fitting (iteration)
u[i] = c(mse_function(Y_test$PhysicalEndurance, predict(temp, X_test)))
}
best_k = which.min(u)
x = 1:length(Y_test$PhysicalEndurance)
plot(x, Y_test$PhysicalEndurance, col='red', type='l') # Original
lines(x, pred_Y_knn, col='blue') # KNN
legend('topright', legend=c('Original', 'KNN'), col=c('red', 'blue'), pch=20)
###------------------------- Y = MentalConcentration -------------------------###
# KNN Model
knn_model = knnreg(X_train, Y_train$MentalConcentration, k=10) #KNN Model Fitting
pred_Y_knn = predict(knn_model, X_test) # KNN Model Prediction
mse_knn = mse_function(Y_test$MentalConcentration, pred_Y_knn)
### For Loop -> best K value (min MSE)
u = c()
temp = c()
for(i in 1:20){
temp = knnreg(X_train, Y_train$MentalConcentration, k=i) # KNN model fitting (iteration)
u[i] = c(mse_function(Y_test$MentalConcentration, predict(temp, X_test)))
}
best_k = which.min(u)
x = 1:length(Y_test$MentalConcentration)
plot(x, Y_test$MentalConcentration, col='red', type='l') # Original
lines(x, pred_Y_knn, col='blue') # KNN
legend('topright', legend=c('Original', 'KNN'), col=c('red', 'blue'), pch=20)
###------------------------- Y = EmotionalMotivation -------------------------###
# KNN Model
knn_model = knnreg(X_train, Y_train$EmotionalMotivation, k=10) #KNN Model Fitting
pred_Y_knn = predict(knn_model, X_test) # KNN Model Prediction
mse_knn = mse_function(Y_test$EmotionalMotivation, pred_Y_knn)
### For Loop -> best K value (min MSE)
u = c()
temp = c()
for(i in 1:20){
temp = knnreg(X_train, Y_train$EmotionalMotivation, k=i) # KNN model fitting (iteration)
u[i] = c(mse_function(Y_test$EmotionalMotivation, predict(temp, X_test)))
}
best_k = which.min(u)
x = 1:length(Y_test$EmotionalMotivation)
plot(x, Y_test$EmotionalMotivation, col='red', type='l') # Original
lines(x, pred_Y_knn, col='blue') # KNN
legend('topright', legend=c('Original', 'KNN'), col=c('red', 'blue'), pch=20)
best_k
u
###------------------------- Y = Dehydration -------------------------###
# KNN Model
knn_model = knnreg(X_train, Y_train$Dehydration, k=10) #KNN Model Fitting
pred_Y_knn = predict(knn_model, X_test) # KNN Model Prediction
mse_knn = mse_function(Y_test$Dehydration, pred_Y_knn)
### For Loop -> best K value (min MSE)
u = c()
temp = c()
for(i in 1:20){
temp = knnreg(X_train, Y_train$Dehydration, k=i) # KNN model fitting (iteration)
u[i] = c(mse_function(Y_test$Dehydration, predict(temp, X_test)))
}
best_k = which.min(u)
x = 1:length(Y_test$Dehydration)
plot(x, Y_test$Dehydration, col='red', type='l') # Original
lines(x, knnreg(X_train, Y_train$Dehydration, k=best_k), col='blue') # KNN
lines(x, (knnreg(X_train, Y_train$Dehydration, k=best_k)), col='blue') # KNN
(knnreg(X_train, Y_train$Dehydration, k=best_k))
lines(x, predict((knnreg(X_train, Y_train$Dehydration, k=best_k), X_test), col='blue') # KNN
lines(x, predict(knnreg(X_train, Y_train$Dehydration, k=best_k), X_test), col='blue') # KNN
k
best_k
###------------------------- Y = Dehydration -------------------------###
# KNN Model
knn_model = knnreg(X_train, Y_train$Dehydration, k=10) #KNN Model Fitting
pred_Y_knn = predict(knn_model, X_test) # KNN Model Prediction
mse_knn = mse_function(Y_test$Dehydration, pred_Y_knn)
### For Loop -> best K value (min MSE)
u = c()
temp = c()
for(i in 1:20){
temp = knnreg(X_train, Y_train$Dehydration, k=i) # KNN model fitting (iteration)
u[i] = c(mse_function(Y_test$Dehydration, predict(temp, X_test)))
}
best_k = which.min(u)
best_k
myds = read.csv("/Datasets/"RegressionData_SDA_AH_group3.csv)
myds = read.csv("/Datasets/"RegressionData_SDA_AH_group3.csv"")
myds = read.csv("/Datasets/"RegressionData_SDA_AH_group3.csv")
myds = read.csv("/Datasets/RegressionData_SDA_AH_group3.csv")
getwd()
myds = read.csv("Datasets/RegressionData_SDA_AH_group3.csv")
library("caret")
preproc <- preProcess(myds, method=c("range"))
myds <- predict(preproc,myds)
library(dplyr)
myds <- rename(myds, Temperature=X_Temperature, Humidity=X_Humidity, Altitude=X_Altitude,
ClimaticConditions=X_ClimaticConditions, RestTimeFromLastMatch=X_RestTimeFromLastMatch,
AvgPlayerValue=X_AvgPlayerValue, MatchRelevance=X_MatchRelevance,
AvgGoalConcededLastMatches=X_AvgGoalConcededLastMatches, SupportersImpact=X_SupportersImpact,
OpposingSupportersImpact=X_OpposingSupportersImpact, Dehydration=Y_Dehydration, Hyperthermia=Y_Hyperthermia,
AvgSpeed=Y_AvgSpeed, AvgTravelledDistance=Y_AvgTravelledDistance,
PressingCapability=Y_PressingCapability, PhysicalEndurance=Y_PhysicalEndurance,
MentalConcentration=Y_MentalConcentration, EmotionalMotivation=Y_EmotionalMotivation)
View(myds)
# Separate the dataset in X (containing predictors) and Y (containing response)
X = myds[, 1:10]
Y = myds[, 11:18]
# Split the two datasets in train and test
splitpoint = 30
X_train = X[1:splitpoint,]
X_test = X[(splitpoint+1):40,]
Y_train = Y[1:splitpoint,]
Y_test = Y[(splitpoint+1):40,]
View(X)
View(X_test)
View(X_train)
View(Y_train)
View(Y_test)
# MSE function
mse_function = function(actual, predicted) {
mean((actual-predicted)^2)
}
### For Loop -> best K value (min MSE)
u = c()
temp = c()
for(i in 1:20){
temp = knnreg(X_train, Y_train$Dehydration, k=i) # KNN model fitting (iteration)
u[i] = c(mse_function(Y_test$Dehydration, predict(temp, X_test)))
}
best_k = which.min(u)
x = 1:length(Y_test$Dehydration)
plot(x, Y_test$Dehydration, col='red', type='l') # Original
best_model = knnreg(X_train, Y_train$Dehydration, k=best_k)
View(best_model)
y_pred = predict(best_model, X_test)
lines(x, y_pred, col='blue') # KNN
legend('topright', legend=c('Original', 'KNN'), col=c('red', 'blue'), pch=20)
### For Loop -> best K value (min MSE)
u = c()
temp = c()
for(i in 1:20){
temp = knnreg(X_train, Y_train$Hyperthermia, k=i) # KNN model fitting (iteration)
u[i] = c(mse_function(Y_test$Hyperthermia, predict(temp, X_test)))
}
best_k = which.min(u)
x = 1:length(Y_test$Hyperthermia)
plot(x, Y_test$Hyperthermia, col='red', type='l') # Original
best_model = knnreg(X_train, Y_train$Hyperthermia, k=best_k)
y_pred = predict(best_model, X_test)
lines(x, y_pred, col='blue') # KNN
legend('topright', legend=c('Original', 'KNN'), col=c('red', 'blue'), pch=20)
### For Loop -> best K value (min MSE)
u = c()
temp = c()
for(i in 1:20){
temp = knnreg(X_train, Y_train$AvgSpeed, k=i) # KNN model fitting (iteration)
u[i] = c(mse_function(Y_test$AvgSpeed, predict(temp, X_test)))
}
best_k = which.min(u)
x = 1:length(Y_test$AvgSpeed)
plot(x, Y_test$AvgSpeed, col='red', type='l') # Original
best_model = knnreg(X_train, Y_train$AvgSpeed, k=best_k)
y_pred = predict(best_model, X_test)
lines(x, y_pred, col='blue') # KNN
legend('topright', legend=c('Original', 'KNN'), col=c('red', 'blue'), pch=20)
### For Loop -> best K value (min MSE)
u = c()
temp = c()
for(i in 1:20){
temp = knnreg(X_train, Y_train$AvgTravelledDistance, k=i) # KNN model fitting (iteration)
u[i] = c(mse_function(Y_test$AvgTravelledDistance, predict(temp, X_test)))
}
best_k = which.min(u)
x = 1:length(Y_test$AvgTravelledDistance)
plot(x, Y_test$AvgTravelledDistance, col='red', type='l') # Original
best_model = knnreg(X_train, Y_train$AvgTravelledDistance, k=best_k)
y_pred = predict(best_model, X_test)
lines(x, y_pred, col='blue') # KNN
legend('topright', legend=c('Original', 'KNN'), col=c('red', 'blue'), pch=20)
### For Loop -> best K value (min MSE)
u = c()
temp = c()
for(i in 1:20){
temp = knnreg(X_train, Y_train$PressingCapability, k=i) # KNN model fitting (iteration)
u[i] = c(mse_function(Y_test$PressingCapability, predict(temp, X_test)))
}
best_k = which.min(u)
x = 1:length(Y_test$PressingCapability)
plot(x, Y_test$PressingCapability, col='red', type='l') # Original
best_model = knnreg(X_train, Y_train$PressingCapability, k=best_k)
y_pred = predict(best_model, X_test)
lines(x, y_pred, col='blue') # KNN
legend('topright', legend=c('Original', 'KNN'), col=c('red', 'blue'), pch=20)
### For Loop -> best K value (min MSE)
u = c()
temp = c()
for(i in 1:20){
temp = knnreg(X_train, Y_train$PhysicalEndurance, k=i) # KNN model fitting (iteration)
u[i] = c(mse_function(Y_test$PhysicalEndurance, predict(temp, X_test)))
}
best_k = which.min(u)
x = 1:length(Y_test$PhysicalEndurance)
plot(x, Y_test$PhysicalEndurance, col='red', type='l') # Original
best_model = knnreg(X_train, Y_train$PhysicalEndurance, k=best_k)
y_pred = predict(best_model, X_test)
lines(x, y_pred, col='blue') # KNN
legend('topright', legend=c('Original', 'KNN'), col=c('red', 'blue'), pch=20)
### For Loop -> best K value (min MSE)
u = c()
temp = c()
for(i in 1:20){
temp = knnreg(X_train, Y_train$MentalConcentration, k=i) # KNN model fitting (iteration)
u[i] = c(mse_function(Y_test$MentalConcentration, predict(temp, X_test)))
}
best_k = which.min(u)
x = 1:length(Y_test$MentalConcentration)
plot(x, Y_test$MentalConcentration, col='red', type='l') # Original
best_model = knnreg(X_train, Y_train$MentalConcentration, k=best_k)
y_pred = predict(best_model, X_test)
lines(x, y_pred, col='blue') # KNN
legend('topright', legend=c('Original', 'KNN'), col=c('red', 'blue'), pch=20)
### For Loop -> best K value (min MSE)
u = c()
temp = c()
for(i in 1:20){
temp = knnreg(X_train, Y_train$EmotionalMotivation, k=i) # KNN model fitting (iteration)
u[i] = c(mse_function(Y_test$EmotionalMotivation, predict(temp, X_test)))
}
best_k = which.min(u)
x = 1:length(Y_test$EmotionalMotivation)
plot(x, Y_test$EmotionalMotivationb, col='red', type='l') # Original
best_model = knnreg(X_train, Y_train$EmotionalMotivation, k=best_k)
y_pred = predict(best_model, X_test)
lines(x, y_pred, col='blue') # KNN
legend('topright', legend=c('Original', 'KNN'), col=c('red', 'blue'), pch=20)
### For Loop -> best K value (min MSE)
u = c()
temp = c()
for(i in 1:20){
temp = knnreg(X_train, Y_train$EmotionalMotivation, k=i) # KNN model fitting (iteration)
u[i] = c(mse_function(Y_test$EmotionalMotivation, predict(temp, X_test)))
}
best_k = which.min(u)
x = 1:length(Y_test$EmotionalMotivation)
plot(x, Y_test$EmotionalMotivationb, col='red', type='l') # Original
best_model = knnreg(X_train, Y_train$EmotionalMotivation, k=best_k)
y_pred = predict(best_model, X_test)
lines(x, y_pred, col='blue') # KNN
legend('topright', legend=c('Original', 'KNN'), col=c('red', 'blue'), pch=20)
### For Loop -> best K value (min MSE)
u = c()
temp = c()
for(i in 1:20){
temp = knnreg(X_train, Y_train$EmotionalMotivation, k=i) # KNN model fitting (iteration)
u[i] = c(mse_function(Y_test$EmotionalMotivation, predict(temp, X_test)))
}
best_k = which.min(u)
x = 1:length(Y_test$EmotionalMotivation)
plot(x, Y_test$EmotionalMotivation, col='red', type='l') # Original
best_model = knnreg(X_train, Y_train$EmotionalMotivation, k=best_k)
y_pred = predict(best_model, X_test)
lines(x, y_pred, col='blue') # KNN
legend('topright', legend=c('Original', 'KNN'), col=c('red', 'blue'), pch=20)
